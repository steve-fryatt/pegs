REM >!Solitaire
REM
REM Copyright 1993-2014, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Solitaire:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.

LIBRARY "BASIC:Icon"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Message"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Url"
LIBRARY "BASIC:WimpError"
LIBRARY "BASIC:WimpSprite"
LIBRARY "BASIC:Window"

PROCwimperror_initialise("Solitaire", "!solitaire")
ON ERROR result% = FNwimperror_program : END

REM These values get replaced by tokenize.

build_version$ = "1.10"
build_date$ = "01 Jul 2009"

PROCinitialise

ON ERROR Quit% = FNwimperror_program

WHILE NOT Quit%
	PROCpoll
ENDWHILE

SYS "Wimp_CloseDown"
END



REM Handle calls to Wimp_Poll and process the responses.
:
DEF PROCpoll
LOCAL reason%

SYS "Wimp_Poll", &3C01, b% TO reason%

CASE reason% OF
	WHEN 2		: SYS "Wimp_OpenWindow",,b%
	WHEN 3		: SYS "Wimp_CloseWindow",,b%
	WHEN 6		: PROCmouse_click(b%!12, b%!16, b%!8)
	WHEN 7		: PROCdrag_end
	WHEN 8		: SYS "Wimp_ProcessKey",b%!24
	WHEN 9		: PROCmenu_selection(b%)
	WHEN 17, 18	: PROCuser_message(b%)
	WHEN 19		: IF b%!16 = &4AF80 THEN PROCurl_bounce(b%)
ENDCASE
ENDPROC


REM Process mouse clicks in windows.
REM
REM \param window%	The window under the mouse.
REM \param icon%	The icon under the mouse.
REM \param buttons%	The buttons involved in the selection.
:
DEF PROCmouse_click(window%, icon%, button%)
CASE window% OF
WHEN -2
	CASE button% OF
	WHEN 2
		PROCmenu_create_iconbar(IconbarMenu%, !b%)
	WHEN 1, 4
		PROCnew_board
		PROCwindow_open(MainWindow%)
	ENDCASE

WHEN MainWindow%
	CASE button% OF
	WHEN 64
		PROCdrag_peg(icon%)
	WHEN 2
		PROCmenu_create(MainMenu%, !b%, b%!4)
	ENDCASE

WHEN InfoWindow%
	IF button% = 4 AND icon% = 8 THEN
		PROCurl_launch(FNmessage_lookup("SupportURL"))
		PROCmenu_create(-1, 0, 0)
	ENDIF
ENDCASE
ENDPROC


REM Process selections from menus.
REM
REM \param		The menu selection block.
:
DEF PROCmenu_selection(block%)
LOCAL reopen%

SYS "Wimp_GetPointerInfo",,q%
reopen% = (q%!8 = 1)

CASE FNmenu_current_handle OF
WHEN MainMenu%
	CASE !block% OF
		WHEN 0	: PROCnew_board
	ENDCASE
WHEN IconbarMenu%
	CASE !block% OF
		WHEN 1	: OSCLI("%Filer_Run <Solitaire$Dir>.!Help")
		WHEN 2	: SolidDrags% = NOT SolidDrags% : PROCmenu_set_state(IconbarMenu%, 2, SolidDrags%, FALSE)
		WHEN 3	: Quit% = TRUE
	ENDCASE
ENDCASE

IF reopen% THEN PROCmenu_create(FNmenu_current_handle, 0, 0)
ENDPROC


REM Process incoming user messages.
REM
REM \param		The user message block.
:
DEF PROCuser_message(block%)
CASE block%!16 OF
	WHEN 0		: Quit% = TRUE
	WHEN &502	: PROCsend_interactive_help(b%)
	WHEN &4E383	: PROCurl_bounce(b%)
ENDCASE
ENDPROC


REM Process requests for interactive help text.
REM
REM \param message%		Pointer to the Message_HelpRequest block.
:
DEF PROCsend_interactive_help(message%)
LOCAL root$, suffix$, found%, message$

REM Compare the window handle to the windows we know about, and find the
REM relevant token name.

CASE message%!32 OF
	WHEN -2			: root$ = "IconBar"
	WHEN MainWindow%	: root$ = "Main"
	WHEN InfoWindow%	: root$ = "Info"
	OTHERWISE		: root$ = ""
ENDCASE

REM Look up the help text, either as a window message or by checking the
REM menus that belong to us.

IF root$ <> "" THEN
	suffix$ = FNicon_validation_command(message%!32, message%!36, "N")

	REM If there's a name in the validation string, use that; otherwise
	REM check to see if there's a special case to set up.

	IF suffix$ <> "" THEN
		root$ += "." + suffix$
	ELSE
		IF message%!32 = MainWindow% AND message%!36 >= 0 AND message%!36 <= 32 THEN root$ += ".Grid"
	ENDIF
	found% = FNmessage_lookup_result("Help." + root$, message$)
ELSE
	SYS "Wimp_GetMenuState", 1, q%, message%!32, message%!36
	CASE FNmenu_current_handle OF
		WHEN MainMenu%		: root$ = "MainMenu." + RIGHT$("00" + STR$(!q%), 2)
		WHEN IconbarMenu%	: root$ = "IconBarMenu." + RIGHT$("00" + STR$(!q%), 2)
	ENDCASE
	
	IF root$ <> "" THEN found% = FNmessage_lookup_result("Help." + root$, message$)
ENDIF

REM If no message was found, give up now.

IF NOT found% THEN ENDPROC

REM If a message was found, send it back to the requestor.

message%!12 = message%!8
message%!16 = &503
$(message% + 20) = message$ + CHR$(0)
!message% = 24+(LEN(message$) AND &FFFFFC)
SYS "Wimp_SendMessage", 17, message%, message%!4
ENDPROC


REM Start to drag a peg.
REM
REM \param icon%		The icon containing the peg to be dragged.
:
DEF PROCdrag_peg(icon%)
LOCAL ox%,oy%,x1%,y1%,x2%,y2%

REM If drags are enabled, or there's no peg, do nothing.

IF NOT DragsEnabled% OR NOT Pegs%(icon%) THEN ENDPROC

REM Remeber the starting place and remove the peg.

DragFrom% = icon%

PROCset_peg(icon%, FALSE)

REM Set up the dragging parameters.

!q% = MainWindow%
SYS "Wimp_GetWindowState",,q%

ox% = q%!4 - q%!20
oy% = q%!16 - q%!24
x1% = q%!4
y1% = q%!8
x2% = q%!12
y2% = q%!16

q%!4 = icon%
SYS "Wimp_GetIconState",,q%

q%!4 = 5
q%!8 = ox% + q%!8
q%!12 = oy% + q%!12
q%!16 = ox% + q%!16
q%!20 = oy% + q%!20
q%!24 = x1%
q%!28 = y1%
q%!32 = x2%
q%!36 = y2%

REM Start the drag.

IF DragASpriteStart% <> -1 AND SolidDrags% THEN
	SYS "DragASprite_Start", %00100101, SpriteArea%, "peg", q%+8, q%+24
ELSE
	SYS "Wimp_DragBox",,q%
ENDIF
ENDPROC


REM Process a Drag End event.
:
DEF PROCdrag_end
IF DragASpriteStop% <> -1 AND SolidDrags% THEN SYS "DragASprite_Stop"

REM Find the end of the drag and process it.

SYS "Wimp_GetPointerInfo",,q%
IF q%!12 = MainWindow% THEN PROCdrop_peg(q%!16)
ENDPROC


REM Process dropped pegs which end up somewhere in the main window.
REM
REM \param icon%		The icon under the end of the drag (may be
REM				-1 or out of range).
:
DEF PROCdrop_peg(icon%)
LOCAL jumped_peg%

REM If the icon is out of range of the grid, return the peg and exit.

IF icon% < 0 OR icon% > 32 THEN
	PROCset_peg(DragFrom%, TRUE)
	ENDPROC
ENDIF

REM If there's already a peg in the destination hole, return the peg and exit.

IF Pegs%(icon%) THEN
	PROCset_peg(DragFrom%, TRUE)
	ENDPROC
ENDIF

REM Check the validity of the move: horizontal or vertical, and over a peg
REM that's still present.

CASE TRUE OF
WHEN FNrow(icon%) = FNrow(DragFrom%) : REM The move was horizontal.
	REM If the move wasn't two slots, return the peg and exit.

	IF ABS(FNcolumn(icon%) - FNcolumn(DragFrom%)) <> 2 THEN
		PROCset_peg(DragFrom%, TRUE)
		ENDPROC
	ENDIF

	REM Work out the icon containing the jumped peg.

	IF FNcolumn(icon%) > FNcolumn(DragFrom%) THEN
		jumped_peg% = icon% - 1
	ELSE
		jumped_peg% = DragFrom% - 1
	ENDIF

WHEN FNcolumn(icon%) = FNcolumn(DragFrom%) : REM The move was vertical.
	REM If the move wasn't two slots, return the peg and exit.

	IF ABS(FNrow(icon%) - FNrow(DragFrom%)) <> 2 THEN
		PROCset_peg(DragFrom%, TRUE)
		ENDPROC
	ENDIF

	REM Work out the icon containing the jumped peg.

	IF FNrow(icon%) > FNrow(DragFrom%) THEN
		jumped_peg% = icon% - RowStart%(FNrow(icon%))
	ELSE
		jumped_peg% = DragFrom% - RowStart%(FNrow(DragFrom%))
	ENDIF

OTHERWISE : REM The move wasn't horizontal or vertical, so return the peg and exit.
	PROCset_peg(DragFrom%, TRUE)
	ENDPROC
ENDCASE

REM If there was no peg in the jumped hole, return the peg and exit.

IF NOT Pegs%(jumped_peg%) THEN
	PROCset_peg(DragFrom%, TRUE)
	ENDPROC
ENDIF

REM The move was valid, so update the board.

PROCset_peg(icon%, TRUE)
PROCset_peg(jumped_peg%, FALSE)

REM If there's just one peg left, it's a win!

IF ABS(SUM(Pegs%())) <= 1 THEN
	DragsEnabled% = FALSE
	PROCwimperror_report(FNmessage_lookup("WellDone"), 1, %01, "")
ENDIF
ENDPROC


REM Add or remove a peg from the board.
REM
REM \param icon%		The icon to change.
REM \param state%		TRUE to place a peg; FALSE to remove it.
:
DEF PROCset_peg(icon%, state%)
IF state% THEN
	PROCicon_set_indirected_text(MainWindow%, icon%, "in")
ELSE
	PROCicon_set_indirected_text(MainWindow%, icon%, "out")
ENDIF
Pegs%(icon%) = state%
PROCicon_redraw(MainWindow%, icon%)
ENDPROC


REM Convert an icon number into a row number, counting from 0 at the top.
REM
REM \param icon%		The icon to convert.
REM \return			The row number for the icon, or -1 on error.
:
DEF FNrow(icon%)
LOCAL row%

CASE icon% OF
	WHEN 0, 1, 2			: row% = 0
	WHEN 3, 4, 5			: row% = 1
	WHEN 6, 7, 8, 9, 10, 11, 12	: row% = 2
	WHEN 13, 14, 15, 16, 17, 18, 19	: row% = 3
	WHEN 20, 21, 22, 23, 24, 25, 26	: row% = 4
	WHEN 27, 28, 29			: row% = 5
	WHEN 30, 31, 32			: row% = 6
ENDCASE
=row%


REM Convert an icon number into a column number, counting from 0 on the left.
REM
REM \param icon%		The icon to convert.
REM \return			The column number for the icon, or -1 on error.
:
DEF FNcolumn(icon%)
LOCAL column%

CASE icon% OF
	WHEN 6, 13, 20			: column% = 0
	WHEN 7, 14, 21			: column% = 1
	WHEN 0, 3, 8, 15, 22, 27, 30	: column% = 2
	WHEN 1, 4, 9, 16, 23, 28, 31	: column% = 3
	WHEN 2, 5, 10, 17, 24, 29, 32	: column% = 4
	WHEN 11, 18, 25			: column% = 5
	WHEN 12, 19, 26			: column% = 6
	OTHERWISE			: column% = -1
ENDCASE
=column%


REM Reset the playing board to a full set of pegs.
:
DEF PROCnew_board
LOCAL loop%

REM Place all the pegs, 

FOR loop%=0 TO 32
	PROCset_peg(loop%, TRUE)
NEXT loop%

REM Remove the centre peg.

PROCset_peg(16, FALSE)

REM Re-enable dragging if it's been disabled.

DragsEnabled%=TRUE
ENDPROC


REM Initialise ourselves, internally and with the Wimp.
:
DEF PROCinitialise
LOCAL i%, resources$, task_name$, task_sprite$, indirected_data%, indirected_size%, ibar_icon%

REM Set up the quit flag and global data blocks.

Quit% = FALSE

DIM b% 4000, q% 255, a% 255

REM Locate the application resources.

resources$ = FNresources_find_territory_folder("<Solitaire$Dir>.Resources")

REM Load the messages file.

PROCmessage_initialise(resources$ + "Messages")

task_name$ = FNmessage_lookup("TaskName")
task_sprite$ = FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(task_name$, task_sprite$)

REM Initialise with the Wimp.

q%!0 = &502
q%!4 = &4E383
q%!8 = &4AF80
q%!12 = 0

SYS "Wimp_Initialise", 310, &4B534154, task_name$, q%

REM Load the application sprites.

SpriteArea% = FNwimpsprite_load_user_sprites("<Solitaire$Dir>.SpriteFile")

REM Load the window templates.

indirected_size% = 2048
DIM indirected_data% indirected_size%

PROCtemplate_open(resources$ + "Templates")
PROCtemplate_load("Board", b%, indirected_data%, indirected_size%, -1)
b%!64 = SpriteArea%
FOR i% = 0 TO 32
	b%!(88 + 32*i% + 24) = SpriteArea%
NEXT i%
SYS "Wimp_CreateWindow",,b% TO MainWindow%
PROCtemplate_load("ProgInfo", b%, indirected_data%, indirected_size%, -1)
SYS "Wimp_CreateWindow",,b% TO InfoWindow%
PROCtemplate_close

$FNicon_indirection(InfoWindow%, 4) = CHR$(169) + " Stephen Fryatt, 1993-" + MID$(build_date$, 8)
$FNicon_indirection(InfoWindow%, 6) = build_version$ + " (" + build_date$ + ")"

REM Initialise and load the menu templates.

PROCmenu_initialise

b%!0 = InfoWindow%
PROCmenu_load_templates(resources$ + "Menus", b%)
IconbarMenu% = b%!0
MainMenu% = b%!4

REM Set up the playing board data storage.

DIM Pegs%(32), RowStart%(6)

REM The icons which start the left-hand end of each row.

RowStart%() = 0,3,5,7,7,5,3

REM Initialise the dragging system.

SolidDrags% = FALSE

PROCdrag_init

IF DragASpriteStart%=-1 THEN
	PROCmenu_set_state(IconbarMenu%, 2, FALSE, TRUE)
ELSE
	PROCmenu_set_state(IconbarMenu%, 2, TRUE, FALSE)
	SolidDrags%=TRUE
ENDIF

REM Create a new playing board.

PROCnew_board

REM Put us on to the iconbar.

ibar_icon% = FNicon_create_standard_bar(-1, task_sprite$)
ENDPROC


REM Initialise the solid dragging.
:
DEF PROCdrag_init
LOCAL cmos%

DragASpriteStart% = FNlookup_swi_number("DragASprite_Start")
DragASpriteStop% = FNlookup_swi_number("DragASprite_Stop")

SYS "OS_Byte", 161, 28 TO ,,cmos%
IF (cmos% AND 2) = 0 THEN
	DragASpriteStart% = -1
	DragASpriteStop% = -1
ENDIF
ENDPROC


REM Given a SWI name, look up its number.
REM
REM \param swi$			The name of the SWI to look up.
REM \return			The corresponding number, or -1 if not found.
:
DEF FNlookup_swi_number(swi$)
LOCAL swi%

SYS "XOS_SWINumberFromString",,swi$ TO swi% ;flag%
IF (flag% AND 1) = 1 THEN =-1
=swi%

