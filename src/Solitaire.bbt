REM >!Solitaire
REM
REM Copyright 1993-2014, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Solitaire:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.

LIBRARY "BASIC:Icon"
LIBRARY "BASIC:LegacyWimp"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Message"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Url"
LIBRARY "BASIC:WimpError"

PROCwimperror_initialise("Solitaire", "!solitaire")
ON ERROR result% = FNwimperror_program : END

REM These values get replaced by tokenize.

build_version$ = "1.10"
build_date$ = "01 Jul 2009"

PROCinitialise

ON ERROR Quit% = FNwimperror_program

WHILE NOT Quit%
	PROCpoll
ENDWHILE

SYS "Wimp_CloseDown"
END




DEF PROCpoll
LOCAL reopen%, reason%
SYS "Wimp_Poll",0,b% TO reason%
CASE reason% OF
WHEN 2 : SYS "Wimp_OpenWindow",,b%
WHEN 3 : SYS "Wimp_CloseWindow",,b%
WHEN 6 : PROCmouse_click(b%!12,b%!16,b%!8)
WHEN 7 : PROCplace_colour
WHEN 8 : SYS "Wimp_ProcessKey",b%!24
WHEN 9
SYS "Wimp_GetPointerInfo",,q%
reopen%=(q%!8 = 1)
IF FNmenu_current_handle=MainMenu% THEN
PROCnew_board
ELSE
 CASE !b% OF
  WHEN 1 : OSCLI("%Filer_Run <Solitaire$Dir>.!Help")
  WHEN 2 : solid%=NOTsolid%:PROCmenu_set_state(IconbarMenu%, 2, solid%, FALSE)
  WHEN 3 : Quit%=TRUE
 ENDCASE
ENDIF
IF reopen% THEN PROCdisplay_menu(FNmenu_current_handle, 0, 0)
WHEN 17,18
 CASE b%!16 OF
  WHEN 0      : Quit%=TRUE
  WHEN &4E383 : PROCurl_bounce(b%)
 ENDCASE
WHEN 19 : IF b%!16 = &4AF80 THEN PROCurl_bounce(b%)
ENDCASE
ENDPROC
:
DEF PROCmouse_click(window%,icon%,button%)
CASE window% OF
  WHEN -2
    CASE button% OF
      WHEN 2 : PROCmenu_create_iconbar(IconbarMenu%, !b%)
      WHEN 1,4 : PROCnew_board : PROCopen_window(main%)
      ENDCASE
  WHEN main%
    CASE button% OF
      WHEN 64 : PROCdrag_col(window%,icon%)
      WHEN 2 : PROCmenu_create(MainMenu%, !b%, b%!4)
      ENDCASE
  WHEN InfoWindow%
    IF button% = 4 AND icon% = 8 THEN
      PROCurl_launch(FNmessage_lookup("SupportURL"))
      PROCdisplay_menu(-1,0,0)
    ENDIF
  ENDCASE
ENDPROC
:
DEF PROCdrag_col(w%,i%)
IF NOT drags% THEN ENDPROC
IF NOT pegs%(i%) THEN VDU 7 : ENDPROC
from%=i%
PROCset_peg(i%,FALSE)
PROCredraw_peg(i%)
PROCdrag(w%,i%)
ENDPROC
:
DEF PROCplace_colour
LOCAL valid%,verti%,horiz%,jump%
valid%=TRUE
icon%=FNdrag_end
IF icon%<0 THEN PROCset_peg(from%,TRUE) : PROCredraw_peg(from%) : ENDPROC
IF pegs%(icon%) THEN
PROCset_peg(from%,TRUE)
PROCredraw_peg(from%)
VDU 7
valid%=FALSE
ENDIF
IF FNrow(icon%)<>FNrow(from%) AND FNcol(icon%)<>FNcol(from%) THEN
PROCset_peg(from%,TRUE)
PROCredraw_peg(from%)
VDU 7
valid%=FALSE
ENDIF
IF valid% THEN
IF FNrow(icon%)=FNrow(from%) THEN horiz%=TRUE : verti%=FALSE
IF FNcol(icon%)=FNcol(from%) THEN verti%=TRUE : horiz%=FALSE
ENDIF
IF verti% THEN
IF ABS(FNrow(icon%)-FNrow(from%))<>2 THEN
PROCset_peg(from%,TRUE)
PROCredraw_peg(from%)
VDU 7
valid%=FALSE
ENDIF
ENDIF
IF horiz% THEN
IF ABS(FNcol(icon%)-FNcol(from%))<>2 THEN
PROCset_peg(from%,TRUE)
PROCredraw_peg(from%)
VDU 7
valid%=FALSE
ENDIF
ENDIF
IF verti% AND valid% THEN
IF FNrow(icon%)>FNrow(from%) THEN
jump%=icon%-rows%(FNrow(icon%))
ELSE
jump%=from%-rows%(FNrow(from%))
ENDIF
ENDIF
IF horiz% AND valid% THEN
IF FNcol(icon%)>FNcol(from%) THEN
jump%=icon%-1
ELSE
jump%=from%-1
ENDIF
ENDIF
IF NOT pegs%(jump%) THEN
PROCset_peg(from%,TRUE)
PROCredraw_peg(from%)
VDU 7
valid%=FALSE
ENDIF
IF valid% THEN
pegs%(from%)=FALSE
pegs%(icon%)=TRUE
pegs%(jump%)=FALSE
PROCset_peg(icon%,TRUE)
PROCset_peg(jump%,FALSE)
PROCredraw_peg(icon%)
PROCredraw_peg(jump%)
pegs%-=1
IF pegs%=0 THEN
drags%=FALSE
PROCwimperror_report(FNmessage_lookup("WellDone"), 1, %01, "")
ENDIF
ENDIF
ENDPROC
:
DEF PROCdrag(whan%,icon%)
LOCAL ox%,oy%,x1%,y1%,x2%,y2%,c%
REMc%=FNicon_colour(whan%,icon%)
!q%=whan%
SYS "Wimp_GetWindowState",,q%
ox%=q%!4-q%!20
oy%=q%!16-q%!24
x1%=q%!4
y1%=q%!8
x2%=q%!12
y2%=q%!16
q%!4=icon%
SYS "Wimp_GetIconState",,q%
q%!4=5
q%!8=ox%+q%!8
q%!12=oy%+q%!12
q%!16=ox%+q%!16
q%!20=oy%+q%!20
q%!24=x1%
q%!28=y1%
q%!32=x2%
q%!36=y2%
IF drag_start%<>-1 AND solid% THEN
SYS "DragASprite_Start",%00100101,sprites%,"peg",q%+8,q%+24
ELSE
SYS "Wimp_DragBox",,q%
ENDIF
ENDPROC
:
DEF FNdrag_end
IF drag_stop%<>-1 AND solid% THEN SYS "DragASprite_Stop"
SYS "Wimp_GetPointerInfo",,q%
=q%!16
:
DEF PROCset_peg(no%,state%)
IF state% THEN
$icon_ref%(no%)="in"
ELSE
$icon_ref%(no%)="out"
ENDIF
ENDPROC
:
DEF PROCredraw_peg(no%)
!b%=main%
b%!4=no%
SYS "Wimp_GetIconState",,b%
SYS "Wimp_ForceRedraw",main%,b%!8,b%!12,b%!16,b%!20
ENDPROC
:
DEF FNrow(i%)
LOCAL row%
CASE i% OF
WHEN 0,1,2                : row%=1
WHEN 3,4,5                : row%=2
WHEN 6,7,8,9,10,11,12     : row%=3
WHEN 13,14,15,16,17,18,19 : row%=4
WHEN 20,21,22,23,24,25,26 : row%=5
WHEN 27,28,29             : row%=6
WHEN 30,31,32             : row%=7
ENDCASE
=row%
:
DEF FNcol(i%)
LOCAL col%
CASE i% OF
WHEN 6,13,20            : col%=1
WHEN 7,14,21            : col%=2
WHEN 0,3,8,15,22,27,30  : col%=3
WHEN 1,4,9,16,23,28,31  : col%=4
WHEN 2,5,10,17,24,29,32 : col%=5
WHEN 11,18,25           : col%=6
WHEN 12,19,26           : col%=7
ENDCASE
=col%
:
DEF FNload_sprites(f$)
LOCAL size%,area%
in%=OPENIN(f$)
size%=EXT#in%
CLOSE#in%
size%+=4
DIM area% size%
!area%=size% : area%!8=16
SYS "OS_SpriteOp",&10A,area%,f$
=area%
:

REM Initialise ourselves, internally and with the Wimp.
:
DEF PROCinitialise
LOCAL resources$, task_name$, task_sprite$, indirected_data%, indirected_size%

REM Set up the quit flag and global data blocks.

Quit% = FALSE

DIM b% 4000, q% 255, a% 255

REM Keep the LegacyWimp libraries happy.

safeblock% = q%

REM Locate the application resources.

resources$ = FNresources_find_territory_folder("<Solitaire$Dir>.Resources")

REM Load the messages file.

PROCmessage_initialise(resources$ + "Messages")

task_name$ = FNmessage_lookup("TaskName")
task_sprite$ = FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(task_name$, task_sprite$)

REM Initialise with the Wimp.

q%!0 = &4E383
q%!4 = &4AF80
q%!8 = 0

SYS "Wimp_Initialise", 310, &4B534154, task_name$, q%

REM Load the window tamplates

indirected_size% = 2048
DIM indirected_data% indirected_size%

PROCtemplate_open(resources$ + "Templates")
PROCtemplate_load("ProgInfo", b%, indirected_data%, indirected_size%, -1)
SYS "Wimp_CreateWindow",,b% TO InfoWindow%
PROCtemplate_close

$FNicon_indirection(InfoWindow%, 4) = CHR$(169) + " Stephen Fryatt, 1993-" + MID$(build_date$, 8)
$FNicon_indirection(InfoWindow%, 6) = build_version$ + " (" + build_date$ + ")"

REM Initialise and load the menu templates

PROCmenu_initialise

b%!0 = InfoWindow%
PROCmenu_load_templates(resources$ + "Menus", b%)
IconbarMenu% = b%!0
MainMenu% = b%!4





sprites%=FNload_sprites("<Solitaire$Dir>.SpriteFile")
:
PROCdrag_init
:
DIM icon_ref%(32),pegs%(32),rows%(7)
pegs%()=TRUE
rows%()=0,0,3,5,7,7,5,3
:
drags%=TRUE
solid%=FALSE
pegs%=31
:
PROCwindows
PROCicons
IF drag_start%=-1 THEN
PROCmenu_set_state(IconbarMenu%, 2, FALSE, TRUE)
ELSE
PROCmenu_set_state(IconbarMenu%, 2, TRUE, FALSE)
solid%=TRUE
ENDIF
PROCset_peg(16,FALSE)
pegs%(16)=FALSE
:
icon%=FNicon_bar(task_sprite$)
ENDPROC
:
DEF PROCnew_board
LOCAL loop%
pegs%()=TRUE
FOR loop%=0 TO 32
PROCset_peg(loop%,TRUE)
NEXT loop%
pegs%=31
PROCset_peg(16,FALSE)
pegs%(16)=FALSE
PROCredraw_window(main%)
drags%=TRUE
ENDPROC
:
DEF PROCdrag_init
drag_start%=FNswi("DragASprite_Start")
drag_stop%=FNswi("DragASprite_Stop")
SYS "OS_Byte",161,28 TO ,,cmos
IF (cmos AND 2)=0 drag_start%=-1:drag_stop%=-1
ENDPROC
:
DEF FNswi(swi$)
SYS "XOS_SWINumberFromString",,swi$ TO swi;flag
IF (flag AND 1) swi=-1
=swi
:
DEF PROCwindows
main%=FNcreate_window(356,190,588,588,0,0,"Solitaire",1,1,1,1,1,1,1,1,0,0,0,0,sprites%,13)
ENDPROC
:
DEF PROCicons
count%=0
FOR y%=1 TO 7
IF y%=3 OR y%=4 OR y%=5 THEN FOR x%=0 TO 6 ELSE FOR x%=2 TO 4
icon_ref%(count%)=FNpeg_icon(x%,y%)
count%+=1
NEXT
NEXT
ENDPROC
:
DEF FNpeg_icon(x%,y%)
LOCAL dim%
DIM dim% 3
$dim%="in"
icon%=FNcreate_icon(main%,x%*76+28,y%*-76-28,76,76,"",dim%,sprites%,4,0,1,0,1,1,0,1,0,6,0,0,0,0,0,0)
=dim%

